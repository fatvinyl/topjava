<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">
        <!--фильтры не используются-->
    <http pattern="/resources/**" security="none"/>
    <http pattern="/webjars/**" security="none"/>
    <!--use-expressions означает, что мы можем использовать эепрешны типа "hasRole('ROLE_ADMIN')"
    stateless означает, что REST запросы идут без сессии, т.е. сессия при авторизации не создается и SPRING хранит авторизованного юзера в ThreadLocal (класс, к-рый хранит по одному инстансу на поток)-->
    <http pattern="/rest/**" use-expressions="true" name="restSecurityFilterChain" create-session="stateless">
    <!--http-basic - это базовая авторизация, логин и пароль вставляет в хедеры-->
        <http-basic/>
        <intercept-url pattern="/rest/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <csrf disabled="true"/>
    </http>

    <http>
        <intercept-url pattern="/login" access="permitAll"/>
        <intercept-url pattern="/register" access="permitAll"/>

        <intercept-url pattern="/**/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <form-login login-page="/login" default-target-url="/meals"
                    authentication-failure-url="/login?error=true"
                    login-processing-url="/spring_security_check"/>
        <logout logout-success-url="/login"/>
        <!--<csrf disabled="true"/>-->
    </http>

    <beans:bean class="ru.javawebinar.topjava.util.PasswordUtil" id="passwordEncoder" factory-method="getPasswordEncoder"/>

    <authentication-manager>
        <!--authentication-provider - это сервис, который проверяет, что наши логин и пароль подошли
        При авторизации spring будет дергать метод loadUserByUsername в классе UserServiceImpl, который отмечен @Service("userService")-->
        <authentication-provider user-service-ref="userService">
            <password-encoder ref="passwordEncoder"/>

            <!--
                        <jdbc-user-service data-source-ref="dataSource"
                                           users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
                                           authorities-by-username-query="
                                                                   SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
                        />
                        <user-service>
                            <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
                            <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
                        </user-service>
            -->
        </authentication-provider>
    </authentication-manager>
</beans:beans>